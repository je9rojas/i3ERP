from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.base import BaseHTTPMiddleware
from pathlib import Path
import os
import traceback

# Configuraci√≥n inicial de la app
app = FastAPI(
    title="i3ERP Sistema",
    description="Sistema ERP Integral con interfaz web",
    version="1.0.0"
)

# Middleware para cach√© de archivos est√°ticos
class StaticCacheMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request, call_next):
        response = await call_next(request)
        
        # Aplicar pol√≠ticas de cach√© solo a archivos est√°ticos
        if request.url.path.startswith(("/public", "/assets", "/styles", "/scripts")):
            # Archivos JS/CSS - 1 a√±o
            if any(request.url.path.endswith(ext) for ext in ['.js', '.css', '.scss']):
                response.headers["Cache-Control"] = "public, max-age=31536000"
            
            # Im√°genes - 1 a√±o
            elif any(request.url.path.endswith(ext) for ext in ['.png', '.jpg', '.jpeg', '.gif', '.ico', '.webp', '.svg']):
                response.headers["Cache-Control"] = "public, max-age=31536000"
            
            # HTML - no cache
            elif request.url.path.endswith('.html'):
                response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
        
        return response

# Configuraci√≥n de CORS m√°s estricta
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:8000", "http://127.0.0.1:8000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["Authorization"]  # Exponer el header de autorizaci√≥n
)

# Agregar middleware de cach√©
app.add_middleware(StaticCacheMiddleware)

# Obtener la ruta base del proyecto
BASE_DIR = Path(__file__).resolve().parent.parent.parent
FRONTEND_DIR = BASE_DIR / "frontend"

# Configuraci√≥n de directorios profesional
public_dir = FRONTEND_DIR / "public"            # Archivos p√∫blicos
assets_dir = FRONTEND_DIR / "src" / "assets"    # Recursos (im√°genes, fuentes)
styles_dir = FRONTEND_DIR / "src" / "styles"    # Hojas de estilo
scripts_dir = FRONTEND_DIR / "src" / "scripts"  # JavaScript
templates_dir = FRONTEND_DIR / "src" / "templates"  # Plantillas

# Crear directorios si no existen (solo para desarrollo)
os.makedirs(public_dir, exist_ok=True)
os.makedirs(assets_dir, exist_ok=True)
os.makedirs(styles_dir, exist_ok=True)
os.makedirs(scripts_dir, exist_ok=True)
os.makedirs(templates_dir, exist_ok=True)

# Montar archivos est√°ticos con rutas espec√≠ficas
app.mount("/public", StaticFiles(directory=str(public_dir)), name="public")
app.mount("/assets", StaticFiles(directory=str(assets_dir)), name="assets")
app.mount("/styles", StaticFiles(directory=str(styles_dir)), name="styles")
app.mount("/scripts", StaticFiles(directory=str(scripts_dir)), name="scripts")

print(f"‚úÖ Archivos p√∫blicos montados desde: {public_dir}")
print(f"‚úÖ Assets montados desde: {assets_dir}")
print(f"‚úÖ Estilos montados desde: {styles_dir}")
print(f"‚úÖ Scripts montados desde: {scripts_dir}")

# SOLUCI√ìN CR√çTICA: Usar ruta absoluta para templates
templates_dir_abs = templates_dir.resolve()

# Configuraci√≥n de templates
try:
    templates = Jinja2Templates(directory=str(templates_dir_abs))
    
    # Verificar existencia de plantillas cr√≠ticas
    required_templates = [
        "layouts/base.html",
        "layouts/auth.html",
        "layouts/base.html",
        "pages/auth/login.html",
        "pages/dashboard/index.html"
    ]
    
    for template in required_templates:
        template_path = templates_dir_abs / template
        if not template_path.exists():
            print(f"‚ö†Ô∏è ERROR CR√çTICO: Plantilla {template} no encontrada en {template_path}")
        else:
            print(f"‚úì Plantilla encontrada: {template}")
    
    print(f"‚úÖ Motor de plantillas Jinja2 configurado correctamente en: {templates_dir_abs}")
    
except Exception as e:
    print(f"‚ùå Error configurando plantillas: {e}")
    print(f"Ruta de templates: {templates_dir_abs}")
    print(f"¬øExiste el directorio? {os.path.exists(templates_dir_abs)}")
    templates = None

# Ruta principal - P√°gina de inicio
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    if not templates:
        return HTMLResponse(content="<h1>Sistema en mantenimiento</h1>", status_code=500)
    
    try:
        # Verificaci√≥n adicional de la plantilla base
        base_template = templates_dir_abs / "layouts" / "base.html"
        if not base_template.exists():
            return HTMLResponse(content=f"<h1>Error: Plantilla base no encontrada en {base_template}</h1>", status_code=500)
        
        context = {
            "request": request,
            "company": {
                "name": "i3ERP Solutions",
                "mission": "Transformar negocios con tecnolog√≠a innovadora",
                "vision": "L√≠deres en soluciones ERP para PyMEs"
            },
            "static_path": "/styles",
            "scripts_path": "/scripts",
            "assets_path": "/assets"
        }
        return templates.TemplateResponse("pages/dashboard/index.html", context)
    except Exception as e:
        print(f"‚ùå Error cargando la p√°gina de inicio (dashboard): {e}")
        traceback.print_exc()
        return HTMLResponse(content=f"<h1>Error interno: {str(e)}</h1>", status_code=500)

# Ruta de login - Interfaz de autenticaci√≥n
@app.get("/login", response_class=HTMLResponse)
async def login_page(request: Request):
    if not templates:
        return HTMLResponse(content="<h1>Sistema en mantenimiento</h1>", status_code=500)
    
    try:
        # Verificar existencia de recursos est√°ticos
        css_path = styles_dir / "pages" / "auth.css"
        js_path = scripts_dir / "modules" / "auth" / "auth.js"
        auth_service_path = scripts_dir / "core" / "auth.js"
        
        if not css_path.exists():
            print(f"‚ö†Ô∏è Advertencia: Archivo CSS no encontrado: {css_path}")
        if not js_path.exists():
            print(f"‚ö†Ô∏è Advertencia: Archivo JS no encontrado: {js_path}")
        if not auth_service_path.exists():
            print(f"‚ö†Ô∏è Advertencia: Archivo JS no encontrado: {auth_service_path}")
        
        context = {
            "request": request,
            "static_path": "/styles",
            "scripts_path": "/scripts",
            "assets_path": "/assets"
        }
        
        return templates.TemplateResponse("pages/auth/login.html", context)
    except Exception as e:
        print(f"‚ùå Error cargando login.html: {e}")
        traceback.print_exc()
        return HTMLResponse(content=f"<h1>Error interno: {str(e)}</h1>", status_code=500)

# Ruta de dashboard - Panel de administraci√≥n
@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard_page(request: Request):
    if not templates:
        return HTMLResponse(content="<h1>Sistema en mantenimiento</h1>", status_code=500)
    
    try:
        context = {
            "request": request,
            "static_path": "/styles",
            "scripts_path": "/scripts",
            "assets_path": "/assets"
        }
        
        return templates.TemplateResponse("pages/dashboard/index.html", context)
    except Exception as e:
        print(f"‚ùå Error cargando dashboard.html: {e}")
        traceback.print_exc()
        return HTMLResponse(content=f"<h1>Error interno: {str(e)}</h1>", status_code=500)

# Ruta de logout - Cerrar sesi√≥n
@app.get("/logout", response_class=HTMLResponse)
async def logout():
    """Cierra la sesi√≥n del usuario (manejo real en cliente)"""
    return RedirectResponse(url="/login")

# --- IMPORTACI√ìN MANUAL DE ROUTERS ---
try:
    from app.blueprints.auth.routes import router as auth_router
    app.include_router(auth_router, prefix="/api/auth", tags=["Autenticaci√≥n"])
    print("‚úÖ M√≥dulo Auth cargado correctamente")
except ImportError as e:
    print(f"‚ö†Ô∏è Error cargando m√≥dulo Auth: {str(e)}")
    traceback.print_exc()
except AttributeError as e:
    print(f"‚ö†Ô∏è Error en la estructura del m√≥dulo Auth: {str(e)}")
    traceback.print_exc()
except Exception as e:
    print(f"‚ö†Ô∏è Error inesperado en m√≥dulo Auth: {str(e)}")
    traceback.print_exc()

try:
    from app.blueprints.users.routes import router as users_router
    app.include_router(users_router, prefix="/api/users", tags=["Usuarios"])
    print("‚úÖ M√≥dulo Users cargado correctamente")
except ImportError as e:
    print(f"‚ö†Ô∏è Error cargando m√≥dulo Users: {str(e)}")
    traceback.print_exc()
except Exception as e:
    print(f"‚ö†Ô∏è Error inesperado en m√≥dulo Users: {str(e)}")
    traceback.print_exc()

try:
    from app.blueprints.dashboard.routes import router as dashboard_router
    app.include_router(dashboard_router, prefix="/api/dashboard", tags=["Dashboard"])
    print("‚úÖ M√≥dulo Dashboard cargado correctamente")
except ImportError:
    print("‚ö†Ô∏è Advertencia: M√≥dulo Dashboard no encontrado. Continuando sin dashboard...")
except Exception as e:
    print(f"‚ö†Ô∏è Error cargando m√≥dulo Dashboard: {str(e)}")
    traceback.print_exc()

# Evento de inicio
@app.on_event("startup")
async def startup_db():
    from app.core.database import init_db
    try:
        await init_db()
        print("‚úÖ Base de datos conectada exitosamente")
    except Exception as e:
        print(f"‚ùå Error conectando a la base de datos: {e}")

# Funci√≥n para imprimir rutas registradas
@app.on_event("startup")
async def print_routes():
    print("\nüåê Rutas registradas:")
    for route in app.routes:
        if hasattr(route, "methods") and hasattr(route, "path"):
            methods = ",".join(route.methods)
            print(f"  - {methods} {route.path}")
    
    print("\n‚ú® Aplicaci√≥n iniciada correctamente")
    print(f"üåê Accede a: http://localhost:8000")
    print("üîç Prueba las rutas de autenticaci√≥n:")
    print(f"  - POST http://localhost:8000/api/auth/token")
    print(f"  - POST http://localhost:8000/api/auth/register")
    print(f"  - GET  http://localhost:8000/api/auth/me")